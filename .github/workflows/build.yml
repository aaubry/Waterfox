name: Build
"on":
  workflow_dispatch: {}
  workflow_call:
    inputs:
      MOZ_BUILD_DATE:
        required: false
        type: string
      PRE_RELEASE:
        required: false
        type: string
      TRIGGER_EVENT:
        description: Trigger event for the workflow
        required: true
        type: string
      TAG_VERSION:
        required: false
        type: string
    outputs:
      versiondisplay:
        description: Output display version
        value: "${{ jobs.build-windows-x64.outputs.versionout }}"
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AZURE_CLIENT_ID:
        required: false
      AZURE_CRT:
        required: false
      AZURE_TENANT_ID:
        required: false
      AZURE_SUBSCRIPTION_ID:
        required: false
      AZURE_VAULT_ID:
        required: false
      CF_ENDPOINT:
        required: false
      MACOS_CERTIFICATE:
        required: false
      MACOS_CERTIFICATE_NAME:
        required: false
      MACOS_CERTIFICATE_PWD:
        required: false
      MACOS_CI_KEYCHAIN_PWD:
        required: false
      MACOS_NOTARIZATION_APPLE_ID:
        required: false
      MACOS_NOTARIZATION_PWD:
        required: false
      MACOS_NOTARIZATION_TEAM_ID:
        required: false
      MOZ_API_KEY:
        required: true
      ONE_PEM:
        required: false
      SIGN_BASE64:
        required: false
env:
  AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
  AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
  MOZ_BUILD_DATE: "${{ inputs.MOZ_BUILD_DATE }}"
  PRE_RELEASE: "${{ inputs.PRE_RELEASE }}"
  RCLONE_S3_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
  RCLONE_S3_ACL: private
  RCLONE_S3_ENDPOINT: "${{ secrets.CF_ENDPOINT }}"
  RCLONE_S3_PROVIDER: Cloudflare
  RCLONE_S3_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
jobs:
  build-linux-x64:
    name: Linux
    runs-on:
      - warp-ubuntu-latest-x64-16x
    env:
      MOZCONFIG: .mozconfig-x86_64-pc-linux-gnu
      ARCH: x86_64-pc-linux-gnu
      CARGO_INCREMENTAL: "0"
      CARGO_TERM_COLOR: always
      SCCACHE_BUCKET: "waterfox-cache-linux-x64-stage-1"
      SCCACHE_ENDPOINT: "${{ secrets.CF_ENDPOINT }}"
      SCCACHE_REGION: auto
    steps:
      - name: Install sccache
        if: ${{ inputs.TRIGGER_EVENT == 'workflow_dispatch' }}
        env:
          LINK: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: "v0.7.7"
        run: |
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          mkdir -p $HOME/.local/bin
          curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Start sccache server
        if: ${{ inputs.TRIGGER_EVENT == 'workflow_dispatch' }}
        run: sccache --start-server
      - name: "\U0001F4BF Setup build packages"
        run: |
          curl -L "https://www.7-zip.org/a/7z2300-linux-x64.tar.xz" | tar xJ
          sudo mv 7zz /usr/local/bin/7z
      - name: "\U0001F4E4 Checkout"
        uses: actions/checkout@v4
      - name: "ü¶Ä Pin Rust version"
        run: rustup default 1.77.2
      - name: "\U0001F4E3 Override version_display.txt"
        if: ${{ inputs.TRIGGER_EVENT == 'workflow_dispatch' }}
        run: |
          if [[ -n ${{ inputs.TAG_VERSION }} ]]; then
            echo ${{ inputs.TAG_VERSION }} > browser/config/version_display.txt
          fi
          echo 'VERSION_DISPLAY<<EOF' >> $GITHUB_ENV
          cat browser/config/version_display.txt >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: "\U0001F3D7 Build Stage 1"
        run: |
          echo "${{ secrets.MOZ_API_KEY }}" > mozilla-api
          if [[ ${{ inputs.TRIGGER_EVENT }} == 'workflow_dispatch' ]]; then
            if [[ $PRE_RELEASE == 'true' ]]; then
              export WFX_PRE_RELEASE=1
              echo "Set WFX_PRE_RELEASE as ${WFX_PRE_RELEASE}"
              echo "WFX_RELEASE should be 0. ${WFX_RELEASE}"
            else
              export WFX_RELEASE=1
              echo "Set WFX_RELEASE as ${WFX_RELEASE}"
              echo "WFX_PRE_RELEASE should be 0. ${WFX_PRE_RELEASE}"
            fi
            export GEN_PGO=1
          fi
          ./mach build
      - name: "\U0001F3D7 Build Stage 2"
        if: ${{ inputs.TRIGGER_EVENT == 'workflow_dispatch' }}
        env:
          DISPLAY: :0
        run: |
          ./mach package
          Xvfb $DISPLAY -screen 0 1280x1024x24 &
          LLVM_PROFDATA=$HOME/.mozbuild/clang/bin/llvm-profdata JARLOG_FILE=en-US.log ./mach python build/pgo/profileserver.py --binary obj-${{ env.ARCH }}/dist/waterfox/waterfox
          unset GEN_PGO
          ./mach clobber
      - name: "\U0001F3D7 Build Stage 3"
        if: ${{ inputs.TRIGGER_EVENT == 'workflow_dispatch' }}
        env:
          SCCACHE_BUCKET: "waterfox-cache-linux-x64-stage-3"
        run: |
          if [[ $PRE_RELEASE == 'true' ]]; then
            export WFX_PRE_RELEASE=1
            echo "Set WFX_PRE_RELEASE as ${WFX_PRE_RELEASE}"
            echo "WFX_RELEASE should be 0. ${WFX_RELEASE}"
          else
            export WFX_RELEASE=1
            echo "Set WFX_RELEASE as ${WFX_RELEASE}"
            echo "WFX_PRE_RELEASE should be 0. ${WFX_PRE_RELEASE}"
          fi
          export USE_PGO=1
          ./mach build          
      - name: Stop sccache
        if: ${{ inputs.TRIGGER_EVENT == 'workflow_dispatch' }}
        run: |
          sccache --stop-server
      - name: "\U0001F4E6 Package"
        if: ${{ inputs.TRIGGER_EVENT == 'workflow_dispatch' }}
        run: |
          ./mach package
          if [ -d "$PWD"/waterfox/browser/locales/en-GB ]; then
            ./mach package-multi-locale --locales ar cs da de el en-GB en-US es-ES es-MX fr hu id it ja ko lt nl nn-NO pl pt-BR pt-PT ru sv-SE th vi zh-CN zh-TW
          fi
          echo "${{ secrets.SIGN_BASE64 }}" | base64 --decode > sign.zip
          unzip -q sign.zip
          rm sign.zip
          chmod +x ./sign/sign.sh
          ./sign/sign.sh -k "$PWD"/sign/1 -p ${{ secrets.ONE_PEM }} -c "$PWD"/sign/2 -i "$PWD"/obj-${{ env.ARCH }}/dist/waterfox -t linux
          rm -rf ./sign/
          tar -c --owner=0 --group=0 --numeric-owner --mode=go-w --exclude=.mkdir.done -jf waterfox-${{ env.VERSION_DISPLAY }}.tar.bz2 -C "$PWD"/obj-${{ env.ARCH }}/dist waterfox
          shasum -a 512 waterfox-${{ env.VERSION_DISPLAY }}.tar.bz2 > waterfox-${{ env.VERSION_DISPLAY }}.tar.bz2.sha512
      - name: "\U0001F4E6 Package MAR"
        if: ${{ inputs.TRIGGER_EVENT == 'workflow_dispatch' }}
        run: >
          if [[ $PRE_RELEASE == 'true' ]]; then
            ./mach repackage mar -i waterfox-${{ env.VERSION_DISPLAY }}.tar.bz2 --mar obj-${{ env.ARCH }}/dist/host/bin/mar -o waterfox-${{ env.VERSION_DISPLAY }}.complete.mar --arch x86_64 --mar-channel-id beta
          else
            ./mach repackage mar -i waterfox-${{ env.VERSION_DISPLAY }}.tar.bz2 --mar obj-${{ env.ARCH }}/dist/host/bin/mar -o waterfox-${{ env.VERSION_DISPLAY }}.complete.mar --arch x86_64 --mar-channel-id release
          fi

          xml=('<?xml version="1.0"?>'

          '<updates>'

          '    <update type="major" appVersion="VERSION"  buildID="BUILDID"
          detailsURL="https://www.waterfox.net/docs/releases/VERSION_DISPLAY"
          displayVersion="VERSION_DISPLAY">'

          '        <patch type="complete"
          URL="https://cdn1.waterfox.net/waterfox/staging/${{ env.VERSION_DISPLAY }}/update/Linux_x86_64/waterfox-${{ env.VERSION_DISPLAY }}.complete.mar" hashFunction="SHA512"
          hashValue="HASH" size="SIZE"/>'

          '    </update>'

          '</updates>')

          for line in "${xml[@]}" ; do echo $line >> update.xml ; done

          VERSION=$(grep '\<Version\>' obj-${{ env.ARCH }}/dist/bin/application.ini | cut -d'=' -f2)

          BUILDID=$(grep 'BuildID=' obj-${{ env.ARCH }}/dist/bin/application.ini
          | cut -d'=' -f2)

          SHA512=$(shasum -a 512 waterfox-${{ env.VERSION_DISPLAY }}.complete.mar | awk '{print $1}')
          
          SIZE=$(ls -l waterfox-${{ env.VERSION_DISPLAY }}.complete.mar | awk '{print $5}')
          
          echo "Display Version: ${{ env.VERSION_DISPLAY }}, Version: $VERSION,
          Build ID: $BUILDID, File Size: $SIZE, SHA512: $SHA512"

          sed -i "s/OPERATING_SYSTEM/$OPERATING_SYSTEM/g" update.xml

          sed -i "s/VERSION_DISPLAY/${{ env.VERSION_DISPLAY }}/g" update.xml

          sed -i "s/VERSION/$VERSION/g" update.xml

          sed -i "s/BUILDID/$BUILDID/g" update.xml

          sed -i "s/SIZE/$SIZE/g" update.xml

          sed -i "s/HASH/"$SHA512"/g" update.xml
      - name: üêõ Debug Session
        if: ${{ failure() }}
        uses: Warpbuilds/gha-debug@v1.3
        timeout-minutes: 15
      - name: "\U0001F199 Upload artifact"
        if: ${{ inputs.TRIGGER_EVENT == 'workflow_dispatch' }}
        uses: actions/upload-artifact@v4
        with:
          name: linux-build-output
          path: |
            waterfox-${{ env.VERSION_DISPLAY }}.tar.bz2
            waterfox-${{ env.VERSION_DISPLAY }}.tar.bz2.sha512
            waterfox-${{ env.VERSION_DISPLAY }}.complete.mar
            update.xml
